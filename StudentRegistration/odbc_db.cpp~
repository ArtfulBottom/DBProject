#include "odbc_db.h"
#include <string>
using namespace std;

odbc_db::odbc_db() {
	string Username = "ls008";
    string mysqlPassword = "ahri3muS";
    string SchemaName = "ls008";
    
    resultSet = NULL;
    metaData = NULL;
    driver = NULL;
    connection = NULL;
    statement = NULL;
}

// Connect to the database
void odbc_db::Connect()
{	
   try
   {
      driver = get_driver_instance();
      connection = driver->connect("tcp://127.0.0.1:3306", "ls008", "ahri3muS");
      connection->setSchema(SchemaName);
      statement = connection->createStatement();
   }
  catch (sql::SQLException &e) 
  {
      cout << "ERROR: SQLException in " << __FILE__;
      cout << " (" << __func__<< ") on line " << __LINE__ << endl;
      cout << "ERROR: " << e.what();
      cout << " (MySQL error code: " << e.getErrorCode();
      cout << ", SQLState: " << e.getSQLState() << ")" << endl;
   }
}

// Disconnect from the database
void odbc_db::disConnect()  
{
   if (resultSet != NULL) {
  	 delete resultSet;
   }
   delete statement;
   connection->close();
   delete connection;
}

// Execute an SQL query passed in as a String parameter
// and print the resulting relation
string odbc_db::query(string q) 
{
   string builder = ""; 
   try 
   {
   	  builder.append("<table>");
      resultSet = statement->executeQuery(q);
      builder.append(print(resultSet));
      builder.append("</table>");
   }
   catch (sql::SQLException e) 
   {
      cout << "ERROR: SQLException in " << __FILE__;
      cout << " (" << __func__<< ") on line " << __LINE__ << endl;
      cout << "ERROR: " << e.what();
      cout << " (MySQL error code: " << e.getErrorCode();
      cout << ", SQLState: " << e.getSQLState() << ")" << endl;
   }
   return builder;
}

// Print the results of a query with attribute names on the first line
// Followed by the tuples, one per line
string odbc_db::print (sql::ResultSet *resultSet) 
{
   string builder = ""; 
   try
   {
      if (resultSet -> rowsCount() != 0)
      {
         sql::ResultSetMetaData *metaData = resultSet->getMetaData();
         int numColumns = metaData->getColumnCount();
         builder.append(printHeader(metaData, numColumns));
         builder.append(printRecords(resultSet, numColumns));
      }
      else
         throw runtime_error("ResultSetMetaData FAILURE - no records in the result set");
   }
   catch (std::runtime_error &e) 
   {
   }
   return builder;
 }

// Print the attribute names
string odbc_db::printHeader(sql::ResultSetMetaData *metaData, int numColumns)
{ 
   string builder = "";
   builder.append("<tr>");
   try 
   {
      //Printing Column names
      for (int i = 1; i <= numColumns; i++) 
      {
         builder.append("<th>");
         builder.append(metaData->getColumnName(i));; //ColumnName
         builder.append("</th>");
      }
      builder.append("<tr>");
   }
   catch (sql::SQLException &e)
   {
   }
   return builder;
}

// Print the attribute values for all tuples in the result
string odbc_db::printRecords(sql::ResultSet *resultSet, int numColumns)   
{ 
   string builder = "";
   builder.append("<tr>");

   //Printing Records
   try
   {
      while (resultSet->next()) 
      {
         for (int i = 1; i <= numColumns; i++) 
         {
            builder.append("<td>");
            builder.append(resultSet->getString(i)); 
            builder.append("</td>");
         }
         builder.append("<tr>");
      }
   }
   catch (sql::SQLException &e)
   {
   }
   return builder;
}

// Insert into any table, any values from data passed in as String parameters
void odbc_db::insert(string table, string values)
{
   string query = "INSERT into " + table + " values (" + values + ")";
   statement->executeUpdate(query);
}

// Remove all records and fill them with values for testing
// Assumes that the tables are already created
// Assumes that connection to database is already made
void odbc_db::initDatabase()
{
   try 
   {
      // Drop records from existing tables
      statement->executeUpdate("DELETE from Enrollment");
      statement->executeUpdate("DELETE from Course");
      statement->executeUpdate("DELETE from Student");

      // Add records to the tables
      insert("Student", "'567465278', 'Roger Williams', 'Electrical Engineering'");
      insert("Student", "'981238278', 'Macy Hotchkiss', 'Geology'");
      
      insert("Course", "'ELEG', '2004', 'Introduction to Circuits', 4");
      insert("Course", "'GEOL', '2004', 'Introduction to Geology', 4");
      
      insert("Enrollment", "'567465278', 'ELEG', '2004'");
      insert("Enrollment", "'981238278', 'GEOL', '2004'");
   }
   catch (sql::SQLException &e)
   {
      cout << "ERROR: SQLException in " << __FILE__;
      cout << " (" << __func__<< ") on line " << __LINE__ << endl;
      cout << "ERROR: " << e.what();
      cout << " (MySQL error code: " << e.getErrorCode();
      cout << ", SQLState: " << e.getSQLState() << ")" << endl;
   }
}
